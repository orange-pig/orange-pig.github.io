<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>若烟阁</title><link>https://orange-pig.github.io/blog/</link><description>Recent content on 若烟阁</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 14 Oct 2025 16:48:07 +0800</lastBuildDate><atom:link href="https://orange-pig.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Flutter in Windows Desktop 工程实践</title><link>https://orange-pig.github.io/blog/posts/flutter-in-windows-desktop-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 14 Oct 2025 16:48:07 +0800</pubDate><guid>https://orange-pig.github.io/blog/posts/flutter-in-windows-desktop-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</guid><description>&lt;p&gt;Flutter虽然在Windows桌面端发力，也发布了正式版。但是，其开发重心仍然在移动端上。和其他成熟的桌面端框架比起来，Flutter还像个小孩子，从设计理念和环境生态很多地方都还是一个小学僧的状态。&lt;/p&gt;
&lt;p&gt;本文为笔者在Windows桌面端程序开发中实际的工程化经验汇总，包含单进程应用、托盘化、命令行参数、设置exe文件的应用信息、打包依赖库、ffi、硬编码数据安全等章节，欢迎留言讨论。&lt;/p&gt;
&lt;h2 id="1-实现单进程应用"&gt;1. 实现单进程应用&lt;/h2&gt;
&lt;p&gt;在windows上单进程我们通常使用互斥量(Mutex)来实现单进程的判断，但是由于dart的基础库对于windows的支撑除了ffi几近于无。又由于dart是单线程模式，所以它社区有一个Mutex库，但是只是单线程内在异步场景使用的。所以，想要通过dart来实现标准的单进程程序在长期来看也是不可能的事情。&lt;/p&gt;
&lt;p&gt;那么，我们将目光转向Flutter的runner层，其中 &lt;code&gt;windows\runner\win32_window.cpp&lt;/code&gt;这个文件负责实现windows窗口的创建、显示和销毁等。&lt;/p&gt;
&lt;p&gt;我们在其中&lt;code&gt;Create&lt;/code&gt;方法中加入代码，完整函数代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;synchapi.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// others code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;HANDLE hMutexHandle;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; Win32Window&lt;span style="color:#f92672"&gt;::&lt;/span&gt;Create(&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; std&lt;span style="color:#f92672"&gt;::&lt;/span&gt;wstring&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; title,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; Point&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; origin,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; Size&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; size) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; hMutexHandle &lt;span style="color:#f92672"&gt;=&lt;/span&gt; CreateMutex(NULL, TRUE, &lt;span style="color:#e6db74"&gt;L&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;mutex.my.app&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (hMutexHandle &lt;span style="color:#f92672"&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;CreateMutex error: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, GetLastError());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DWORD errorCode &lt;span style="color:#f92672"&gt;=&lt;/span&gt; GetLastError();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (errorCode &lt;span style="color:#f92672"&gt;==&lt;/span&gt; ERROR_INVALID_HANDLE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;Mutex name be used.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;if&lt;/span&gt; (errorCode &lt;span style="color:#f92672"&gt;==&lt;/span&gt; ERROR_ALREADY_EXISTS) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;Mutex name already exists.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 这个FindWindowA的方法有个bug，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 如果打开了一个资源管理器的文件目录和应用同名，那么它可能会找到这个资源管理器。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// HWND handle = FindWindowA(NULL, &amp;#34;My App&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 所以我们通过进程名来获取其主窗口的句柄
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 因为flutter是单页应用只有一个窗口，所以只要获取窗口句柄不用区分就认为是主窗口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// Get process id by process execute name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; DWORD dwProcessId &lt;span style="color:#f92672"&gt;=&lt;/span&gt; GetProcessIdByName(TEXT(&lt;span style="color:#e6db74"&gt;&amp;#34;PICStudio.exe&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (dwProcessId &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;Process not found!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Get window handle by process id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; HWND handle &lt;span style="color:#f92672"&gt;=&lt;/span&gt; GetMainWindowHandle(dwProcessId);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (handle &lt;span style="color:#f92672"&gt;==&lt;/span&gt; NULL)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;Main window not found!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; WINDOWPLACEMENT place &lt;span style="color:#f92672"&gt;=&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(WINDOWPLACEMENT) };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GetWindowPlacement(handle, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;place);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt; (place.showCmd)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; SW_SHOWMAXIMIZED:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 错误用法：ShowWindow(handle, SW_SHOWMAXIMIZED);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; SendMessage(handle, WM_SYSCOMMAND, SW_SHOWMAXIMIZED, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; SW_SHOWMINIMIZED:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SendMessage(handle, WM_SYSCOMMAND, SW_RESTORE, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (IsWindowVisible(handle))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SendMessage(handle, WM_SYSCOMMAND, SW_NORMAL, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SendMessage(handle, WM_SYSCOMMAND, SC_RESTORE, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetForegroundWindow(handle);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// others code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，通过&lt;code&gt;CreateMutex&lt;/code&gt;win32 api来创建有名称的全局互斥量。如果互斥量已经被人使用了，则&lt;code&gt;GetLastError&lt;/code&gt;方法就会获取到&lt;code&gt;ERROR_ALREADY_EXISTS&lt;/code&gt;值。&lt;/p&gt;</description></item><item><title>Mockjs 实践用法</title><link>https://orange-pig.github.io/blog/posts/mockjs-%E5%AE%9E%E8%B7%B5%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 14 Oct 2025 16:45:10 +0800</pubDate><guid>https://orange-pig.github.io/blog/posts/mockjs-%E5%AE%9E%E8%B7%B5%E7%94%A8%E6%B3%95/</guid><description>&lt;p&gt;网上教程很多，但大多都是官网的照搬和堆砌，作者认为对于使用者来说，往往看了教程后，所学却不足以解决实际中的各种问题。所以本文介绍Mockjs的一些实践的用法，希望能帮助读者解决实际问题。&lt;/p&gt;
&lt;h2 id="安装和入门"&gt;安装和入门&lt;/h2&gt;
&lt;p&gt;请认真阅读&lt;a href="https://github.com/nuysoft/Mock/wiki"&gt;官方教程&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Tips: 官方教程连贯度不是很友好，可结合参考 &lt;a href="https://juejin.cn/post/6953199521031520292"&gt;博客1&lt;/a&gt; &lt;a href="https://juejin.cn/post/7054020390363856910"&gt;博客2&lt;/a&gt; &lt;a href="https://juejin.cn/post/7068472129729085470"&gt;博客3&lt;/a&gt;，差异处以官方教程为准&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="设置"&gt;设置&lt;/h2&gt;
&lt;p&gt;常规情况下设置Mock接口的超时时间范围，模拟动态的网络环境。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Mock.setup({
 timeout: &amp;#39;100-900&amp;#39;,
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="get查询参数匹配"&gt;Get查询参数匹配&lt;/h2&gt;
&lt;p&gt;在使用Get时，实际情况往往是有参数的。Mock的url参数如果直接指定字符串则时直接匹配，带了查询参数的URI则会被认为不匹配。所以Mock支持第一个参数传入一个RegExp对象进行正则匹配，对于常规情况只需要在URL后加上&lt;code&gt;.*&lt;/code&gt;即可。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Mock.mock(RegExp(&amp;#34;/helloword.*&amp;#34;), &amp;#39;get&amp;#39;, req =&amp;gt; {
 return req.url;
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="两大概念"&gt;两大概念&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;数据模板&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据模板是一个object对象，其中可以定义数据的模板结构，每个属性由：属性名、属性生成规则、属性值组成。&lt;/p&gt;
&lt;p&gt;属性值可以为具体值作为默认值，也可为候选列表作为生成规则的数据来源，也可以为带数据占位符的字符串。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Mock.mock(&amp;#34;/helloworld&amp;#34;, &amp;#39;post&amp;#39;, {
 &amp;#34;id|+1&amp;#34;: 1,
 &amp;#34;name&amp;#34;: &amp;#34;Jack&amp;#34;,
 &amp;#34;teacher|1&amp;#34;: [&amp;#34;Jone&amp;#34;, &amp;#34;Sam&amp;#34;, &amp;#34;Sherry&amp;#34;],
 &amp;#34;brithday&amp;#34;: &amp;#34;@date&amp;#34;,
 &amp;#34;age|20-35&amp;#34;: 20,
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;数据占位符&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据占位符&lt;code&gt;@&lt;/code&gt;在属性的值中使用，用于访问模板中其他属性的生成值，或调用生成函数。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Mock.mock(&amp;#34;/helloworld&amp;#34;, &amp;#39;post&amp;#39;, {
 &amp;#34;message&amp;#34;: &amp;#34;hell0 @name&amp;#34;,
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="参数模板"&gt;参数模板&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mock的随机函数使用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mock提供的&lt;a href="https://github.com/nuysoft/Mock/wiki/Mock.Random"&gt;随机函数&lt;/a&gt;很多，常用的比如：cname、datetime、email、guid等等。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Mock.mock(&amp;#34;/userinfo&amp;#34;, &amp;#39;get&amp;#39;, {
 &amp;#34;createTime&amp;#34;: &amp;#34;@datetime&amp;#34;,
 &amp;#34;name&amp;#34;: &amp;#34;@cname&amp;#34;, // 随机中文名
 &amp;#34;email&amp;#34;: &amp;#34;@email&amp;#34;,
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;自定义的随机函数使用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;举个简单的例子如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;const address = [&amp;#34;张家界&amp;#34;, &amp;#34;九寨沟&amp;#34;, &amp;#34;泰山&amp;#34;, &amp;#34;蓬莱&amp;#34;];

Mock.Random.extend({
 // 自定义随机函数 Address
 Address: function () {
 return this.pick(address)
 }
})

Mock.mock(&amp;#34;/helloworld&amp;#34;, &amp;#39;post&amp;#39;, {
 &amp;#34;addr&amp;#34;: &amp;#34;@Address&amp;#34;, // 使用占位符访问随机函数
 &amp;#34;addr|1&amp;#34;: address, // 与前一行同样的效果，更加简单
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的随机需求使用属性生成规则完全就可以搞定，没必要些自定义随机函数这么麻烦。&lt;/p&gt;</description></item><item><title>你好！博客！</title><link>https://orange-pig.github.io/blog/posts/my-first-post/</link><pubDate>Tue, 14 Oct 2025 10:56:05 +0800</pubDate><guid>https://orange-pig.github.io/blog/posts/my-first-post/</guid><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text, and this is &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt; website!&lt;/p&gt;</description></item></channel></rss>